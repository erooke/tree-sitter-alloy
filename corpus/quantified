====
Basic - Block
====

fact {
  all a: A { a in B }
}

---

(source_file
  (fact_decl
    (block
      (quantified_expression
        (decl
          (name)
          (name))
        (block
          (binary_expression
            (name)
            (name)))))))


====
Basic - Bar
====

fact {
  all a: A | a in B 
}

---

(source_file
  (fact_decl
    (block
      (quantified_expression
        (decl
          (name)
          (name))
        (binary_expression
          (name)
          (name))))))


====
Multiple - bar
====

fact {
  all a: A, b: B | c
}

----

(source_file
  (fact_decl
    (block
      (quantified_expression
        (decl
          (name)
          (name))
        (decl
          (name)
          (name))
        (name)))))

====
Let
====

fact {
  let a = b | b => c else d
}

---

(source_file
  (fact_decl
    (block
      (let_expression
        (let_decl
          (name)
          (name))
        (implication_expression
          (name)
          (name)
          (name))))))
