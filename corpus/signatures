=====
Basic
=====

sig Object {}

---

(source_file
  (sig_decl
    (name)))


=====
Abstract
=====

abstract sig Object {}

---

(source_file
  (sig_decl
    (name)))

=====
Variable
=====

var sig Object {}

---

(source_file
  (sig_decl
    (name)))

=====
Multiplicity
=====

lone sig Object {}

---

(source_file
  (sig_decl
    (mult)
    (name)))

=====
Multiple
=====

abstract sig Object, Object2 {}

---

(source_file
  (sig_decl
    (name)
    (name)))


=====
Extends
=====

abstract sig Object, Object2 extends Object3 {}

---

(source_file
  (sig_decl
    (name)
    (name)
    (sig_extension
      (qual_name))))


=====
In
=====

abstract sig Object, Object2 in Object3 + Object4{}

---

(source_file
  (sig_decl
    (name)
    (name)
    (sig_extension
      (qual_name)
      (qual_name))))

====
Fields
====

sig A {}

sig B {
  var a: lone A
}

sig C {
  a: one A,
  b: some B
}

---

(source_file
  (sig_decl
    (name))
  (sig_decl
      (name)
      (field_decl
        (decl
          (name)
          (unary_expression
            (qual_name)))))
  (sig_decl
    (name)
    (field_decl
      (decl
        (name)
        (unary_expression
          (qual_name))))
    (field_decl
      (decl
        (name)
        (unary_expression
          (qual_name))))))

====
Block
=====

sig A { b: one B }{}

sig B { a: one A }{ a.b in iden }

----
(source_file
  (sig_decl
    (name)
    (field_decl
      (decl
        (name)
        (unary_expression
          (qual_name))))
    (block))
  (sig_decl
    (name)
    (field_decl
      (decl
        (name)
        (unary_expression
          (qual_name))))
    (block
      (binary_expression
        (binary_expression
          (qual_name)
          (qual_name))
        (constant_expression)))))
